var N = null;var searchIndex = {};
searchIndex["pwasm_std"]={"doc":"Standard library for parity wasm programs","items":[[0,"vec","pwasm_std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",N,N],[3,"Vec","pwasm_std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[3,"IntoIter","","An iterator that moves out of a vector.",N,N],[3,"Drain","","A draining iterator for `Vec<T>`.",N,N],[3,"Splice","","A splicing iterator for `Vec`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",N,N],[14,"vec","pwasm_std","Creates a [`Vec`] containing the arguments.",N,N],[14,"format","","Creates a `String` using interpolation of runtime expressions.",N,N],[3,"Box","","A pointer type for heap allocation.",N,N],[3,"String","","A UTF-8 encoded, growable string.",N,N],[0,"str","","Unicode string slices.",N,N],[5,"from_boxed_utf8_unchecked","pwasm_std::str","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",N,[[["box"]],["box",["str"]]]],[3,"Split","","Created with the method [`split`].",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",0,N],[10,"from_str","","Parses a string `s` to return a value of this type.",0,[[["str"]],["result"]]],[0,"pattern","","The string Pattern API.",N,N],[8,"Pattern","pwasm_std::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",1,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",1,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",1,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",1,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",1,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",2,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",2,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",2,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",3,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",3,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",3,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",3,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",4,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",4,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",4,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[3,"Chars","pwasm_std::str","An iterator over the [`char`]s of a string slice.",N,N],[3,"RMatches","","Created with the method [`rmatches`].",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[3,"Lines","","An iterator over the lines of a string, as string slices.",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[3,"Vec","pwasm_std","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[5,"panic_fmt","","Overrides the default panic_fmt",N,N],[5,"oom","","Overrides the default oom",N,N],[5,"keccak","","Compute keccak hash.",N,[[["t"]],["h256"]]],[5,"read_u32","","Read u32 using native endianness",N,N],[5,"write_u32","","Write u32 using native endianness",N,N],[5,"write_ptr","","Write ptr using native endianness",N,N],[5,"read_u64","","Read u64 using native endianness",N,N],[5,"write_u64","","Write u64 using native endianness",N,N],[0,"types","","Provides primitive fixed size hash types.",N,N],[3,"U256","pwasm_std::types","Little-endian large integer type",N,N],[12,"0","","",5,N],[3,"H160","","A 160 bits (20 bytes) hash type.",N,N],[3,"H256","","A 256-bits (32 bytes) hash type.",N,N],[6,"Address","","Represents an address in ethereum context.",N,N],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the given byte.",6,[[["u8"]],["h160"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",6,[[],["h160"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",6,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",6,N],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed hash.",6,N],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the entire fixed hash.",6,N],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the entire fixed hash.",6,N],[11,"to_fixed_bytes","","Returns the inner bytes array.",6,N],[11,"as_ptr","","Returns a constant raw pointer to the value.",6,N],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",6,N],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",6,N],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",6,N],[11,"covers","","Returns `true` if all bits set in `b` are also set in `self`.",6,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",6,[[["self"]],["bool"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the given byte.",7,[[["u8"]],["h256"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",7,[[],["h256"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",7,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",7,N],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed hash.",7,N],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the entire fixed hash.",7,N],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the entire fixed hash.",7,N],[11,"to_fixed_bytes","","Returns the inner bytes array.",7,N],[11,"as_ptr","","Returns a constant raw pointer to the value.",7,N],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",7,N],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",7,N],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",7,N],[11,"covers","","Returns `true` if all bits set in `b` are also set in `self`.",7,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",7,[[["self"]],["bool"]]],[0,"logger","pwasm_std","Logger extensions for pwasm-std",N,N],[5,"debug","pwasm_std::logger","Log debug message to the runtime",N,[[["str"]]]],[11,"from","pwasm_std","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","pwasm_std::vec","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","pwasm_std","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"call_box","","",13,N],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"from","pwasm_std::str","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","pwasm_std::str::pattern","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","pwasm_std::str","",27,[[["t"]],["t"]]],[11,"into_iter","","",27,[[["self"]],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","pwasm_std::types","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"fmt","pwasm_std::str","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str::pattern","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str::pattern","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str::pattern","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str::pattern","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str::pattern","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::str","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"haystack","pwasm_std::str::pattern","",24,[[["self"]],["str"]]],[11,"next","","",24,[[["self"]],["searchstep"]]],[11,"next_match","","",24,[[["self"]],["option"]]],[11,"next_reject","","",24,[[["self"]],["option"]]],[11,"haystack","","",26,[[["self"]],["str"]]],[11,"next","","",26,[[["self"]],["searchstep"]]],[11,"next_match","","",26,[[["self"]],["option"]]],[11,"haystack","","",23,[[["self"]],["str"]]],[11,"next","","",23,[[["self"]],["searchstep"]]],[11,"next_match","","",23,[[["self"]],["option"]]],[11,"haystack","","",25,[[["self"]],["str"]]],[11,"next","","",25,[[["self"]],["searchstep"]]],[11,"next_match","","",25,[[["self"]],["option"]]],[11,"next_reject","","",25,[[["self"]],["option"]]],[11,"next","pwasm_std::str","",31,[[["self"]],["option",["str"]]]],[11,"size_hint","","",31,N],[11,"next","","",27,[[["self"]],["option",["char"]]]],[11,"count","","",27,[[["self"]],["usize"]]],[11,"size_hint","","",27,N],[11,"last","","",27,[[["self"]],["option",["char"]]]],[11,"next","","",28,[[["self"]],["option",["str"]]]],[11,"next","","",34,[[["self"]],["option",["str"]]]],[11,"next","","",15,[[["self"]],["option",["str"]]]],[11,"next","","",37,[[["self"]],["option",["str"]]]],[11,"next","","",16,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"last","","",16,[[["self"]],["option"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"all","","",16,[[["self"],["f"]],["bool"]]],[11,"any","","",16,[[["self"],["f"]],["bool"]]],[11,"find","","",16,[[["self"],["p"]],["option"]]],[11,"position","","",16,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",16,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",21,[[["self"]],["option",["str"]]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"next","","",29,[[["self"]],["option",["str"]]]],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"size_hint","","",30,N],[11,"next","","",36,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option",["str"]]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"count","","",22,[[["self"]],["usize"]]],[11,"size_hint","","",22,N],[11,"last","","",22,[[["self"]],["option"]]],[11,"next","","",20,[[["self"]],["option",["str"]]]],[11,"next","","",38,[[["self"]],["option",["str"]]]],[11,"size_hint","","",38,N],[11,"next","","",32,[[["self"]],["option",["str"]]]],[11,"size_hint","","",32,N],[11,"next","","",17,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",17,N],[11,"next_back","","",30,[[["self"]],["option",["str"]]]],[11,"next_back","","",38,[[["self"]],["option",["str"]]]],[11,"next_back","","",15,[[["self"]],["option",["str"]]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"next_back","","",21,[[["self"]],["option",["str"]]]],[11,"next_back","","",28,[[["self"]],["option",["str"]]]],[11,"next_back","","",35,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option",["char"]]]],[11,"next_back","","",32,[[["self"]],["option",["str"]]]],[11,"next_back","","",33,[[["self"]],["option",["str"]]]],[11,"next_back","","",31,[[["self"]],["option",["str"]]]],[11,"next_back","","",36,[[["self"]],["option"]]],[11,"next_back","","",34,[[["self"]],["option",["str"]]]],[11,"next_back","","",29,[[["self"]],["option",["str"]]]],[11,"next_back","","",16,[[["self"]],["option",["u8"]]]],[11,"rfind","","",16,[[["self"],["p"]],["option"]]],[11,"clone","pwasm_std::str::pattern","",2,[[["self"]],["searchstep"]]],[11,"clone","","",24,[[["self"]],["charslicesearcher"]]],[11,"clone","pwasm_std::str","",35,[[["self"]],["rmatchindices"]]],[11,"clone","","",18,[[["self"]],["utf8error"]]],[11,"clone","","",29,[[["self"]],["rsplit"]]],[11,"clone","pwasm_std::str::pattern","",23,[[["self"]],["charsearcher"]]],[11,"clone","pwasm_std::str","",20,[[["self"]],["splitn"]]],[11,"clone","","",22,[[["self"]],["charindices"]]],[11,"clone","","",15,[[["self"]],["split"]]],[11,"clone","","",37,[[["self"]],["rsplitn"]]],[11,"clone","pwasm_std::str::pattern","",26,[[["self"]],["strsearcher"]]],[11,"clone","pwasm_std::str","",32,[[["self"]],["lines"]]],[11,"clone","","",33,[[["self"]],["matches"]]],[11,"clone","","",36,[[["self"]],["matchindices"]]],[11,"clone","","",31,[[["self"]],["linesany"]]],[11,"clone","","",17,[[["self"]],["encodeutf16"]]],[11,"clone","","",30,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","","",21,[[["self"]],["splitterminator"]]],[11,"clone","","",28,[[["self"]],["rmatches"]]],[11,"clone","","",34,[[["self"]],["rsplitterminator"]]],[11,"clone","","",16,[[["self"]],["bytes"]]],[11,"clone","pwasm_std::str::pattern","",25,[[["self"]],["charpredicatesearcher"]]],[11,"clone","pwasm_std::str","",19,[[["self"]],["parseboolerror"]]],[11,"clone","","",27,[[["self"]],["chars"]]],[11,"clone","","",38,[[["self"]],["splitwhitespace"]]],[11,"next_back","pwasm_std::str::pattern","",24,[[["self"]],["searchstep"]]],[11,"next_match_back","","",24,[[["self"]],["option"]]],[11,"next_reject_back","","",24,[[["self"]],["option"]]],[11,"next_back","","",26,[[["self"]],["searchstep"]]],[11,"next_match_back","","",26,[[["self"]],["option"]]],[11,"next_back","","",25,[[["self"]],["searchstep"]]],[11,"next_match_back","","",25,[[["self"]],["option"]]],[11,"next_reject_back","","",25,[[["self"]],["option"]]],[11,"next_back","","",23,[[["self"]],["searchstep"]]],[11,"next_match_back","","",23,[[["self"]],["option"]]],[11,"fmt","pwasm_std::str","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"is_empty","","",16,[[["self"]],["bool"]]],[11,"eq","pwasm_std::str::pattern","",2,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",2,[[["self"],["searchstep"]],["bool"]]],[11,"eq","pwasm_std::str","",19,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",19,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","","",18,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",18,[[["self"],["utf8error"]],["bool"]]],[11,"finish","pwasm_std","",13,[[["self"]],["u64"]]],[11,"write","","",13,N],[11,"write_u8","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_u128","","",13,N],[11,"write_usize","","",13,N],[11,"write_i8","","",13,N],[11,"write_i16","","",13,N],[11,"write_i32","","",13,N],[11,"write_i64","","",13,N],[11,"write_i128","","",13,N],[11,"write_isize","","",13,N],[11,"index","","",8,N],[11,"index","","",14,[[["self"],["range",["usize"]]],["str"]]],[11,"index","","",14,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",14,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",14,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",14,[[["self"],["rangefull"]],["str"]]],[11,"index","","",14,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"add","","",14,[[["self"],["str"]],["string"]]],[11,"add_assign","","",14,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_ref","","",14,[[["self"]],["str"]]],[11,"as_ref","","",13,[[["self"]],["t"]]],[11,"as_ref","","",14,N],[11,"as_ref","","",8,N],[11,"as_ref","","",8,[[["self"]],["vec"]]],[11,"from_iter","","",8,[[["i"]],["vec"]]],[11,"from_iter","","",14,[[["i"]],["string"]]],[11,"from_iter","","",14,[[["i"]],["string"]]],[11,"from_iter","","",14,[[["i"]],["string"]]],[11,"from_iter","","",14,[[["i"]],["string"]]],[11,"from_iter","","",14,[[["i"]],["string"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",8,[[["self"]],["intoiter"]]],[11,"is_empty","pwasm_std::vec","",10,[[["self"]],["bool"]]],[11,"is_empty","","",9,[[["self"]],["bool"]]],[11,"len","pwasm_std","",13,[[["self"]],["usize"]]],[11,"is_empty","","",13,[[["self"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,[[["self"],["vec"]],["bool"]]],[11,"ne","","",8,[[["self"],["vec"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",14,[[["self"],["str"]],["bool"]]],[11,"ne","","",14,[[["self"],["str"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",14,[[["self"],["str"]],["bool"]]],[11,"ne","","",14,[[["self"],["str"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",14,[[["self"],["string"]],["bool"]]],[11,"ne","","",14,[[["self"],["string"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",14,[[["self"],["cow"]],["bool"]]],[11,"ne","","",14,[[["self"],["cow"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"eq","","",13,[[["self"],["box"]],["bool"]]],[11,"ne","","",13,[[["self"],["box"]],["bool"]]],[11,"eq","","",8,N],[11,"ne","","",8,N],[11,"resume","","",13,[[["self"]],["generatorstate"]]],[11,"from","","",8,[[["vecdeque"]],["vec"]]],[11,"from","","",13,N],[11,"from","","",13,[[["string"]],["box",["str"]]]],[11,"from","","",8,N],[11,"from","","",13,[[["box",["str"]]],["box"]]],[11,"from","","",13,[[["t"]],["box"]]],[11,"from","","",14,[[["str"]],["string"]]],[11,"from","","",13,[[["str"]],["box",["str"]]]],[11,"from","","",8,[[["box"]],["vec"]]],[11,"from","","",14,[[["cow",["str"]]],["string"]]],[11,"from","","",13,[[["vec"]],["box"]]],[11,"from","","",14,[[["box",["str"]]],["string"]]],[11,"from","","",8,N],[11,"from","","",8,[[["string"]],["vec",["u8"]]]],[11,"from","","",8,[[["binaryheap"]],["vec"]]],[11,"from","","",8,[[["str"]],["vec",["u8"]]]],[11,"from","","",8,[[["cow"]],["vec"]]],[11,"hash","","",13,N],[11,"hash","","",14,N],[11,"hash","","",8,N],[11,"next","pwasm_std::vec","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"count","","",9,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next","pwasm_std","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"nth","","",13,[[["self"],["usize"]],["option"]]],[11,"next","pwasm_std::vec","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next_back","pwasm_std","",13,[[["self"]],["option"]]],[11,"next_back","pwasm_std::vec","",9,[[["self"]],["option"]]],[11,"index_mut","pwasm_std","",14,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",14,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",14,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","","",14,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",8,N],[11,"index_mut","","",14,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index_mut","","",14,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"fmt","pwasm_std::vec","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::vec","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std::vec","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","pwasm_std","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",13,[[["self"]],["t"]]],[11,"deref","","",8,N],[11,"deref","","",14,[[["self"]],["str"]]],[11,"partial_cmp","","",13,[[["self"],["box"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["box"]],["bool"]]],[11,"le","","",13,[[["self"],["box"]],["bool"]]],[11,"ge","","",13,[[["self"],["box"]],["bool"]]],[11,"gt","","",13,[[["self"],["box"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",14,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["string"]],["bool"]]],[11,"le","","",14,[[["self"],["string"]],["bool"]]],[11,"gt","","",14,[[["self"],["string"]],["bool"]]],[11,"ge","","",14,[[["self"],["string"]],["bool"]]],[11,"borrow_mut","","",8,N],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"clone","","",13,[[["self"]],["box",["str"]]]],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",13,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",13,N],[11,"clone","","",8,[[["self"]],["vec"]]],[11,"clone_from","","",8,N],[11,"clone","","",14,[[["self"]],["string"]]],[11,"clone_from","","",14,N],[11,"clone","","",13,[[["self"]],["box"]]],[11,"clone","pwasm_std::vec","",9,[[["self"]],["intoiter"]]],[11,"deref_mut","pwasm_std","",14,[[["self"]],["str"]]],[11,"deref_mut","","",13,[[["self"]],["t"]]],[11,"deref_mut","","",8,N],[11,"from_str","","",14,[[["str"]],["result",["string","parseerror"]]]],[11,"cmp","","",14,[[["self"],["string"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["box"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["vec"]],["ordering"]]],[11,"poll","","",13,[[["pin",["box"]],["localwaker"]],["poll"]]],[11,"borrow","","",8,N],[11,"borrow","","",14,[[["self"]],["str"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"call_once","","",13,[[["self"],["a"]],["r"]]],[11,"call_once","","",13,[[["self"],["a"]],["r"]]],[11,"as_mut","","",8,N],[11,"as_mut","","",13,[[["self"]],["t"]]],[11,"as_mut","","",8,[[["self"]],["vec"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"write_str","","",14,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",14,[[["self"],["char"]],["result",["error"]]]],[11,"extend","","",14,N],[11,"extend","","",14,N],[11,"extend","","",8,N],[11,"extend","","",14,N],[11,"extend","","",14,N],[11,"extend","","",8,N],[11,"extend","","",14,N],[11,"default","","",13,[[],["box"]]],[11,"default","","",13,[[],["box",["str"]]]],[11,"default","","Creates an empty `String`.",14,[[],["string"]]],[11,"default","","Creates an empty `Vec<T>`.",8,[[],["vec"]]],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",13,[[],["box"]]],[11,"drop","","",13,N],[11,"drop","pwasm_std::vec","",10,N],[11,"drop","pwasm_std","",8,N],[11,"drop","pwasm_std::vec","",9,N],[11,"drop","","",11,N],[11,"drop","","",12,N],[11,"bitor","pwasm_std::types","",5,[[["self"],["u256"]],["u256"]]],[11,"shr","","",5,[[["self"],["t"]],["u256"]]],[11,"add","","",5,[[["self"],["t"]],["u256"]]],[11,"add_assign","","",5,N],[11,"shl","","",5,[[["self"],["t"]],["u256"]]],[11,"shl_assign","","",5,N],[11,"cmp","","",5,[[["self"],["u256"]],["ordering"]]],[11,"rem_assign","","",5,N],[11,"mul","","",5,[[["self"],["i16"]],["u256"]]],[11,"mul","","",5,[[["self"],["i64"]],["u256"]]],[11,"mul","","",5,[[["self"],["u8"]],["u256"]]],[11,"mul","","",5,[[["self"],["isize"]],["u256"]]],[11,"mul","","",5,[[["self"],["usize"]],["u256"]]],[11,"mul","","",5,[[["self"],["u256"]],["u256"]]],[11,"mul","","",5,[[["self"],["u256"]],["u256"]]],[11,"mul","","",5,[[["self"],["u16"]],["u256"]]],[11,"mul","","",5,[[["self"],["i16"]],["u256"]]],[11,"mul","","",5,[[["self"],["u64"]],["u256"]]],[11,"mul","","",5,[[["self"],["usize"]],["u256"]]],[11,"mul","","",5,[[["self"],["i64"]],["u256"]]],[11,"mul","","",5,[[["self"],["isize"]],["u256"]]],[11,"mul","","",5,[[["self"],["u8"]],["u256"]]],[11,"mul","","",5,[[["self"],["i8"]],["u256"]]],[11,"mul","","",5,[[["self"],["i8"]],["u256"]]],[11,"mul","","",5,[[["self"],["u32"]],["u256"]]],[11,"mul","","",5,[[["self"],["u64"]],["u256"]]],[11,"mul","","",5,[[["self"],["u16"]],["u256"]]],[11,"as_ref","","",5,[[["self"]],["u256"]]],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",5,N],[11,"div_assign","","",5,N],[11,"sub","","",5,[[["self"],["t"]],["u256"]]],[11,"eq","","",5,[[["self"],["u256"]],["bool"]]],[11,"ne","","",5,[[["self"],["u256"]],["bool"]]],[11,"from","","",5,[[["i8"]],["u256"]]],[11,"from","","",5,[[["u16"]],["u256"]]],[11,"from","","",5,[[["i64"]],["u256"]]],[11,"from","","",5,[[["u256"]],["u256"]]],[11,"from","","",5,[[["i32"]],["u256"]]],[11,"from","","",5,[[["u32"]],["u256"]]],[11,"from","","",5,[[["i16"]],["u256"]]],[11,"from","","",5,[[["u64"]],["u256"]]],[11,"from","","",5,[[["isize"]],["u256"]]],[11,"from","","",5,[[["usize"]],["u256"]]],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,[[["u8"]],["u256"]]],[11,"from","","",5,N],[11,"rem","","",5,[[["self"],["t"]],["u256"]]],[11,"hash","","",5,N],[11,"bitand","","",5,[[["self"],["u256"]],["u256"]]],[11,"shr_assign","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"not","","",5,[[["self"]],["u256"]]],[11,"div","","",5,[[["self"],["t"]],["u256"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub_assign","","",5,N],[11,"default","","",5,[[],["u256"]]],[11,"bitxor","","",5,[[["self"],["u256"]],["u256"]]],[11,"partial_cmp","","",5,[[["self"],["u256"]],["option",["ordering"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",5,[[["self"]],["u256"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed length.",6,N],[11,"from","","Constructs a hash type from the given reference to the bytes array of fixed length. ",6,N],[11,"from","","Constructs a hash type from the given reference to the mutable bytes array of fixed length. ",6,N],[11,"from","","Constructs a hash type from the given bytes array of fixed length.",7,N],[11,"from","","Constructs a hash type from the given reference to the bytes array of fixed length. ",7,N],[11,"from","","Constructs a hash type from the given reference to the mutable bytes array of fixed length. ",7,N],[11,"from","","",7,[[["h160"]],["h256"]]],[11,"from","","",6,[[["h256"]],["h160"]]],[11,"from","","",7,[[["u256"]],["h256"]]],[11,"from","","",7,[[["u256"]],["h256"]]],[11,"from","","",5,[[["h256"]],["u256"]]],[11,"from","","",5,[[["h256"]],["u256"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","","",7,[[["self"],["self"]],["option",["ordering"]]]],[11,"bitand","","",6,N],[11,"bitand","","",7,N],[11,"bitor","","",6,N],[11,"bitor","","",7,N],[11,"bitxor","","",6,N],[11,"bitxor","","",7,N],[11,"bitand_assign","","",6,[[["self"],["h160"]]]],[11,"bitand_assign","","",6,[[["self"],["h160"]]]],[11,"bitand_assign","","",7,[[["self"],["h256"]]]],[11,"bitand_assign","","",7,[[["self"],["h256"]]]],[11,"bitor_assign","","",6,[[["self"],["h160"]]]],[11,"bitor_assign","","",6,[[["self"],["h160"]]]],[11,"bitor_assign","","",7,[[["self"],["h256"]]]],[11,"bitor_assign","","",7,[[["self"],["h256"]]]],[11,"bitxor_assign","","",6,[[["self"],["h160"]]]],[11,"bitxor_assign","","",6,[[["self"],["h160"]]]],[11,"bitxor_assign","","",7,[[["self"],["h256"]]]],[11,"bitxor_assign","","",7,[[["self"],["h256"]]]],[11,"index","","",6,N],[11,"index","","",7,N],[11,"index_mut","","",6,N],[11,"index_mut","","",7,N],[11,"hash","","",6,[[["self"],["h"]]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["h160"]]],[11,"clone","","",7,[[["self"]],["h256"]]],[11,"as_ref","","",6,N],[11,"as_ref","","",7,N],[11,"as_mut","","",6,N],[11,"as_mut","","",7,N],[11,"default","","",6,[[],["self"]]],[11,"default","","",7,[[],["self"]]],[11,"new","pwasm_std","Constructs a new, empty `Vec<T>`.",8,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",8,[[["usize"]],["vec"]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",8,N],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",8,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",8,N],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",8,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",8,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",8,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",8,N],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",8,N],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",8,[[["self"]],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",8,N],[11,"as_slice","","Extracts a slice containing the entire vector.",8,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",8,N],[11,"set_len","","Sets the length of a vector.",8,N],[11,"swap_remove","","Removes an element from the vector and returns it.",8,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",8,N],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",8,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",8,N],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",8,N],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",8,N],[11,"push","","Appends an element to the back of a collection.",8,N],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",8,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",8,N],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",8,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",8,N],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",8,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",8,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",8,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",8,N],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",8,N],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",8,N],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",8,N],[11,"dedup","","Removes consecutive repeated elements in the vector according to the [`PartialEq`] trait implementation.",8,N],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",8,[[["self"],["t"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",8,[[["self"],["r"],["i"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",8,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","pwasm_std::vec","Returns the remaining items of this iterator as a slice.",9,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",9,N],[11,"new","pwasm_std","Allocates memory on the heap and then places `x` into it.",13,[[["t"]],["box"]]],[11,"pinned","","",13,[[["t"]],["pin",["box"]]]],[11,"from_raw","","Constructs a box from a raw pointer.",13,N],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",13,N],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",13,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.",13,[[["box"]],["t"]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",13,[[["self"]],["result",["box","box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",13,[[["self"]],["result",["box","box"]]]],[11,"new","","Creates a new empty `String`.",14,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",14,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",14,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",14,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",14,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with [the replacement character (`U+FFFD`)][U+FFFD].",14,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",14,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",14,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",14,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",14,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",14,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",14,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",14,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",14,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",14,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",14,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",14,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",14,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",14,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",14,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",14,N],[11,"truncate","","Shortens this `String` to the specified length.",14,N],[11,"pop","","Removes the last character from the string buffer and returns it.",14,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",14,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",14,N],[11,"insert","","Inserts a character into this `String` at a byte position.",14,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",14,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",14,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",14,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",14,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",14,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",14,N],[11,"drain","","Creates a draining iterator that removes the specified range in the `String` and yields the removed `chars`.",14,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",14,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",14,[[["self"]],["box",["str"]]]],[11,"valid_up_to","pwasm_std::str","Returns the index in the given string up to which valid UTF-8 was verified.",18,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",18,[[["self"]],["option",["usize"]]]],[11,"as_str","","View the underlying data as a subslice of the original data.",22,[[["self"]],["str"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",27,[[["self"]],["str"]]],[18,"MAX","pwasm_std::types","Maximum value.",5,N],[11,"from_dec_str","","Convert from a decimal string.",5,[[["str"]],["result",["u256","fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",5,[[["self"]],["u32"]]],[11,"low_u64","","Low word (u64)",5,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",5,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",5,[[["self"]],["u64"]]],[11,"as_usize","","Conversion to usize with overflow checking",5,[[["self"]],["usize"]]],[11,"is_zero","","Whether this is zero.",5,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",5,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",5,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",5,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",5,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",5,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",5,N],[11,"to_little_endian","","Write to the slice in little-endian format.",5,N],[11,"exp10","","Create `10**n` as this type.",5,[[["usize"]],["u256"]]],[11,"zero","","Zero (additive identity) of this type.",5,[[],["u256"]]],[11,"one","","One (multiplicative identity) of this type.",5,[[],["u256"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",5,[[],["u256"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,[[["self"],["u256"]],["u256"]]],[11,"overflowing_pow","","Fast exponentation by squaring. Returns result and overflow flag.",5,N],[11,"overflowing_add","","Add with overflow.",5,N],[11,"saturating_add","","Addition which saturates at the maximum value (Self::max_value()).",5,[[["self"],["u256"]],["u256"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",5,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",5,N],[11,"saturating_sub","","Subtraction which saturates at zero.",5,[[["self"],["u256"]],["u256"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",5,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",5,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",5,[[["self"],["u256"]],["u256"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",5,[[["self"],["u256"]],["option",["u256"]]]],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",5,[[["self"],["u256"]],["option",["u256"]]]],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",5,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_neg","","Negation with overflow.",5,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",5,[[["self"]],["option",["u256"]]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory.",5,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory.",5,N]],"paths":[[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"U256"],[3,"H160"],[3,"H256"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"Box"],[3,"String"],[3,"Split"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"SplitN"],[3,"SplitTerminator"],[3,"CharIndices"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Chars"],[3,"RMatches"],[3,"RSplit"],[3,"SplitAsciiWhitespace"],[3,"LinesAny"],[3,"Lines"],[3,"Matches"],[3,"RSplitTerminator"],[3,"RMatchIndices"],[3,"MatchIndices"],[3,"RSplitN"],[3,"SplitWhitespace"]]};
initSearch(searchIndex);
